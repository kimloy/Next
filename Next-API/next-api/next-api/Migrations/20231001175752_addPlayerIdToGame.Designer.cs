// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using next_api.DbContexts;

#nullable disable

namespace next_api.Migrations
{
    [DbContext(typeof(NextApiContext))]
    [Migration("20231001175752_addPlayerIdToGame")]
    partial class addPlayerIdToGame
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("next_api.Entities.AddressComponent", b =>
                {
                    b.Property<string>("AddressComponent_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Long_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Park_ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Short_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AddressComponent_ID");

                    b.HasIndex("Park_ID");

                    b.ToTable("AddressComponent");
                });

            modelBuilder.Entity("next_api.Entities.Closing_Hours", b =>
                {
                    b.Property<string>("Week_day")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Park_ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Week_day");

                    b.HasIndex("Park_ID")
                        .IsUnique();

                    b.ToTable("Closing_Hours");
                });

            modelBuilder.Entity("next_api.Entities.Game", b =>
                {
                    b.Property<string>("Game_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateTIme")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number_Of_Players")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Park_ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Place_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Player_ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sport_Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Game_ID");

                    b.HasIndex("Park_ID");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("next_api.Entities.GameDocInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GameDocInfos");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("next_api.Entities.Geometry", b =>
                {
                    b.Property<string>("Geometry_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location_ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Park_ID")
                        .HasColumnType("TEXT");

                    b.HasKey("Geometry_ID");

                    b.HasIndex("Location_ID");

                    b.HasIndex("Park_ID")
                        .IsUnique();

                    b.ToTable("Geometry");
                });

            modelBuilder.Entity("next_api.Entities.Location", b =>
                {
                    b.Property<string>("Location_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Lat")
                        .HasColumnType("REAL");

                    b.Property<double>("Lng")
                        .HasColumnType("REAL");

                    b.Property<string>("Park_ID")
                        .HasColumnType("TEXT");

                    b.HasKey("Location_ID");

                    b.HasIndex("Park_ID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("next_api.Entities.Open_hours", b =>
                {
                    b.Property<string>("Week_Day")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Park_ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Week_Day");

                    b.HasIndex("Park_ID")
                        .IsUnique();

                    b.ToTable("Open_Hours");
                });

            modelBuilder.Entity("next_api.Entities.Park", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon_Background_Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon_Mask_Base_Uri")
                        .HasColumnType("TEXT");

                    b.Property<string>("International_Phone_Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Place_Id")
                        .HasColumnType("TEXT");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("User_Ratings_Total")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Utc_Offset")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vicinity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Park", (string)null);
                });

            modelBuilder.Entity("next_api.Entities.Player", b =>
                {
                    b.Property<string>("Player_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date_Of_Birth")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Game_ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Park_ID")
                        .HasColumnType("TEXT");

                    b.HasKey("Player_ID");

                    b.HasIndex("Game_ID");

                    b.HasIndex("Park_ID");

                    b.ToTable("Player", (string)null);

                    b.HasData(
                        new
                        {
                            Player_ID = "1",
                            Date_Of_Birth = "10/12/1992",
                            Name = "Paul"
                        });
                });

            modelBuilder.Entity("next_api.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author_Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author_Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Park_ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Profile_Photo_Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Relative_Time_Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Time")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Park_ID");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("next_api.Entities.Sport", b =>
                {
                    b.Property<string>("Sport_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("GameDocInfo_ID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Max_Num_Players")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Sport_ID");

                    b.HasIndex("GameDocInfo_ID");

                    b.ToTable("Sport");

                    b.HasData(
                        new
                        {
                            Sport_ID = "1",
                            GameDocInfo_ID = 1,
                            Max_Num_Players = 12,
                            Name = "Basketball"
                        },
                        new
                        {
                            Sport_ID = "2",
                            GameDocInfo_ID = 1,
                            Max_Num_Players = 12,
                            Name = "Football"
                        },
                        new
                        {
                            Sport_ID = "3",
                            GameDocInfo_ID = 1,
                            Max_Num_Players = 12,
                            Name = "Soccer"
                        });
                });

            modelBuilder.Entity("next_api.Entities.AddressComponent", b =>
                {
                    b.HasOne("next_api.Entities.Park", "Park")
                        .WithMany("AddressComponents")
                        .HasForeignKey("Park_ID");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("next_api.Entities.Closing_Hours", b =>
                {
                    b.HasOne("next_api.Entities.Park", "Park")
                        .WithOne("CloseHours")
                        .HasForeignKey("next_api.Entities.Closing_Hours", "Park_ID");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("next_api.Entities.Game", b =>
                {
                    b.HasOne("next_api.Entities.Park", "Park")
                        .WithMany("Games")
                        .HasForeignKey("Park_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Park");
                });

            modelBuilder.Entity("next_api.Entities.Geometry", b =>
                {
                    b.HasOne("next_api.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("Location_ID");

                    b.HasOne("next_api.Entities.Park", "Park")
                        .WithOne("Geometry")
                        .HasForeignKey("next_api.Entities.Geometry", "Park_ID");

                    b.Navigation("Location");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("next_api.Entities.Location", b =>
                {
                    b.HasOne("next_api.Entities.Park", "Park")
                        .WithMany()
                        .HasForeignKey("Park_ID");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("next_api.Entities.Open_hours", b =>
                {
                    b.HasOne("next_api.Entities.Park", "Park")
                        .WithOne("OpenHours")
                        .HasForeignKey("next_api.Entities.Open_hours", "Park_ID");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("next_api.Entities.Player", b =>
                {
                    b.HasOne("next_api.Entities.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("Game_ID");

                    b.HasOne("next_api.Entities.Park", "Park")
                        .WithMany("Players")
                        .HasForeignKey("Park_ID");

                    b.Navigation("Game");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("next_api.Entities.Review", b =>
                {
                    b.HasOne("next_api.Entities.Park", "Park")
                        .WithMany("Reviews")
                        .HasForeignKey("Park_ID");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("next_api.Entities.Sport", b =>
                {
                    b.HasOne("next_api.Entities.GameDocInfo", "GameDocInfo")
                        .WithMany("Sports_List")
                        .HasForeignKey("GameDocInfo_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameDocInfo");
                });

            modelBuilder.Entity("next_api.Entities.Game", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("next_api.Entities.GameDocInfo", b =>
                {
                    b.Navigation("Sports_List");
                });

            modelBuilder.Entity("next_api.Entities.Park", b =>
                {
                    b.Navigation("AddressComponents");

                    b.Navigation("CloseHours");

                    b.Navigation("Games");

                    b.Navigation("Geometry")
                        .IsRequired();

                    b.Navigation("OpenHours");

                    b.Navigation("Players");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
